<div id="amend" hidden>
	<h5>AMEND YOUR VIEWS</h5>
	<p><small>Fill out the details of your views with text, photo, web, and navigation elements. Select a view and add elements to it.</small></p>
	<form>
		<div class="row">
			<p><strong><small>YOUR VIEWS</small></strong></p>
			<ul id="listViews"></ul>
		</div>
		<div class="bordered-div row">
			<div class="three columns">
				<p><strong><small>ELEMENT</small></strong></p>
				<p><small><span id="currentElement"></span></small></p>
			</div>
			<div class="three columns">
				<a class="button button-go" href="javascript:void(0)" id="displayAdd">+</a>
				<p><small>ADD ELEMENT</small></p>
			</div>
			<div class="six columns">
				<input type="radio" name="element" class="elType" onclick="elementSelect(this);" value="text" checked>
				<span class="label-body">Text Element</span><br/>
				<input type="radio" name="element" class="elType" onclick="elementSelect(this);" value="photo">
				<span class="label-body">Photo Element</span><br/>
				<input type="radio" name="element" class="elType" onclick="elementSelect(this);" value="web">
				<span class="label-body">Web Element</span><br/>
				<input type="radio" name="element" class="elType" onclick="elementSelect(this);" value="nav">
				<span class="label-body">Navigation Element</span>
			</div>
		</div>
		<div class="bordered-div row" id="textOptions">
			<div class="one columns">
				&nbsp;
			</div>
			<div class="ten columns">
				<textarea placeholder="Enter text" class="u-full-width" id="textValue"></textarea>
			</div>
		</div>
		<div class="bordered-div" id="urlOptions" hidden>
			<div class="row">
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<input class="u-full-width" type="text" placeholder="title (optional, 20 chars max)" maxlength="20" id="titleEl">
				</div>
			</div>
			<div class="row">
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<input class="u-full-width" type="text" placeholder="subtitle (optional, 50 chars max)" maxlength="50" id="subtitleEl">
				</div>
			</div>
			<div class="row">
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<input class="u-full-width" type="text" placeholder="url link of image (https only)" id="urlImage">
				</div>
			</div>
			<div class="row" id="urlElHolder" hidden>
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<input class="u-full-width" type="text" placeholder="whitelisted url destination (https only, required)" id="urlEl">
				</div>
			</div>
		</div>
		<div class="bordered-div" id="navigationOptions" hidden>
			<div class="row">
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<label for="optionText"><small>Destination text (what the user will see)</small></label>
					<input class="u-full-width" type="text" maxlength="10" placeholder="Enter label (10 chars max)" id="optionText">
				</div>
			</div>

			<div class="row">
				<div class="one columns">
					&nbsp;
				</div>
				<div class="ten columns">
					<label for="destinationNames"><small>Select destination</small></label>
					<select class="u-full-width" id="destinationNames"></select>
				</div>
			</div>
		</div>
		<div class="bordered-div border-bottom bordered-div-margin-bottom row">
			<div class="one columns">
				&nbsp;
			</div>
			<div class="ten columns">
				<p class="mb0"><small><em>view elements</em></small></p>
				<ul id="viewElements" class="mb13"></ul>
				<p class="mb0"><small><em>navigation options</em></small></p>
				<ul id="navElements"></ul>
			</div>
		</div>
		<div class="row">
			<a class="button button-back" href="javascript:void(0)" onclick="back5()">BACK</a>
			<a class="button button-primary" href="javascript:void(0)" id="5">FINISH</a>
		</div>
	</form>
	<script type="text/javascript">
		// init
		function initAmend() {
			for (var i = 0; i < window.viewNames.length; i++) {
				viewAgg[window.viewNames[i]] = {elements: [], options: []}
			}

			for (var key in agg[1]) {
				let value = agg[1][key]
				viewAgg[key]['elements'].push({
					type: 'text',
					value: value
				})
			}

			navigationSelectOptions()
			initViewsList('listViews')
			elementsForView()
			elementsForNavigation()
			$($('.viewAmend').first()).addClass('highlighted')
			$('#currentElement').text(`(${selectedView.toUpperCase()})`)
			$('#displayAdd').off().on('click', createElement)
		}

		// set navigation options to select
		function navigationSelectOptions() {
			$('#destinationNames').html('')
			$('#destinationNames').append('<option value="">Destinations</option>')
			window.viewNames.forEach(function(v) {
				if (v!==selectedView&&v!=='fallback') {
					$('#destinationNames').append(`<option value="${v}">${v}</option>`)
				}
			})
		}

		// add element to view
		function createElement() {
			var element = { type: currentValue }
			var context = 'elements'
			switch (currentValue) {
				case 'text':
					element.value = $('#textValue').val().trim()
					if (!element.value) {
						alert('Please enter valid text to create this element.')
						return
					}
					$('#textValue').val('')
					break

				case 'photo':
				case 'web':
					var re = /^https:\/\//
					element.value = {
						title: $('#titleEl').val(),
						subtitle: $('#subtitleEl').val(),
						url: $('#urlEl').val().replace(/ /g, '').toLowerCase(),
						image: $('#urlImage').val().replace(/ /g, '').toLowerCase()
					}
					if ((currentValue === 'web'&&!element.value.url)||(currentValue === 'photo'&&!element.value.image)) {
						alert('URL link is necessary to add this element, try again.')
						return						
					}
					if ((currentValue === 'web'&&!element.value.url)||(currentValue === 'photo'&&!element.value.image)) {
						alert('URL must start with "https://", please try again.')
						return
					}
					if (currentValue === 'web') {
						var approvedURLNotFound = true
						for (var i = 0; i < window.agg[0].webURLs.length; i++) {
							if (element.value.url.indexOf(window.agg[0].webURLs[i]) > -1) {
								approvedURLNotFound = false
								break
							}
						}
						if (approvedURLNotFound) {
							alert('Web link must be whitelisted under configuration web URL from earlier setting named "Configuration". Please go back and add URL to your configuration.')
							return
						}
					}
					break

				case 'nav':
					context = 'options'
					element.value = {
						destination: $('#destinationNames').val(),
						text: $('#optionText').val().trim() || $('#destinationNames').val()
					}
					if (!element.value.destination) {
						alert('Please select a destination view from the dropdown.')
						return
					}
					if (element.value.text.length > 10) {
						alert('Large labels are automatically cropped by Messenger. Please shorten the length of your text to 10 or fewer characters for a better user experience.')
						return
					}
					break

				default:
					console.log('default')
					break
			}
			resetInputs()
			viewAgg[selectedView][context].push(element)
			elementsForView()
			elementsForNavigation()
			if (viewAgg[selectedView]['elements'].length > 1 && viewAgg[selectedView]['options'].length > 1) {
				initDraggable()
			} else if (viewAgg[selectedView]['elements'].length > 1) {
				initDraggable(false, true)
			} else if (viewAgg[selectedView]['options'].length > 1) {
				initDraggable(true, false)
			}
		}

		// reset all inputs
		function resetInputs() {
			$('#textValue').val('')
			$('#titleEl').val('')
			$('#subtitleEl').val('')
			$('#urlEl').val('')
			$('#urlImage').val('')
			$('#optionText').val('')
			$('#destinationNames').prop('selectedIndex', 0)
		}

		// display elements of a view
		function elementsForView() {
			let dict = viewAgg[selectedView]
			let elems = dict.elements
			$('#viewElements').html('')
			if (elems.length) {
				elems.forEach(function(e, idx) {
					if (e.type&&e.type !== 'nav') {
						var v = ''
						if (e.type === 'text') {
							v = `<span class="li-sub-top">position: ${idx+1}</span><br><span class="el-type">text element</span><br>"${e.value}"`
						} else if (e.type === 'photo' || e.type === 'web') {
							v = `<span class="li-sub-top">position: ${idx+1}</span><br><span class="el-type">${e.type} element</span><br>`
							if (e.value.title) {
								v += `title: "${e.value.title}"<br>`
							}
							if (e.value.subtitle) {
								v += `subtitle: "${e.value.subtitle}"<br>`
							}
							if (e.value.image) {
								v += `image: ${e.value.image}`
							}
							if (e.value.url) {
								if (e.value.image) v += '<br>'
								v += `link: ${e.value.url}`
							}
						} 
						addRow('viewElements', v, false, e.type, idx)
					}
				})
			} else {
				// none created
				addRow('viewElements', 'There are no view elements', true)
			}
		}

		// display navigation elements
		function elementsForNavigation() {
			let dict = viewAgg[selectedView]
			let elems = dict.options
			$('#navElements').html('')
			if (elems.length) {
				elems.forEach(function(e, idx) {
					if (e.type&&e.type === 'nav') {
						addRow('navElements', `<span class="li-sub-top">position: ${idx+1}</span><br><span class="li-sub-mid">to: ${e.value.destination}</span><br><span class="li-sub-bottom">label: "${e.value.text}"</span>`, false, 'nav', idx)
					}
				})
			} else {
				// none created
				addRow('navElements', 'There are no navigation options', true)
			}
		}		

		// shows input options
		function elementSelect(radio, elName) {
			currentValue = elName || radio.value
			$('#urlElHolder').hide()
			switch (currentValue) {
				case 'text':
					$('#urlOptions').hide()
					$('#navigationOptions').hide()
					$('#textOptions').show()
					break
				
				case 'web':
					if (!window.agg[0]['webURLs']) {
						alert('Web URL is missing, please configure it on the screen named "Configuration" to create this element.')
					}
					$('#urlElHolder').show()
				case 'photo':
					$('#textOptions').hide()
					$('#navigationOptions').hide()
					$('#urlOptions').show()
					break

				case 'nav':
					$('#textOptions').hide()
					$('#urlOptions').hide()
					$('#navigationOptions').show()
					break
			}
		}

		// user changes view to amend els
		function switchView(view) {
			selectedView = view
			$('#currentElement').text(`(${selectedView.toUpperCase()})`)
			navigationSelectOptions()
			$('input[type=radio][name=element][value=text]').prop('checked', true)
			elementSelect(null, 'text')
			resetInputs()
			elementsForView()
			elementsForNavigation()
		}

		// edit previously made element
		function changeElement(element) {
			let name = $(element).html()
			// switch on name
		}

		// user removes element
		function removeElement(ctx) {
			var _arr;
			if ($(ctx).hasClass('nav')) {
				_arr = viewAgg[selectedView]['options']
			} else {
				_arr = viewAgg[selectedView]['elements']
			}
			var arr = JSON.parse(JSON.stringify(_arr))
			var idx = Number.parseInt($($(ctx).closest('li')[0]).attr('data-id'))
			arr.splice(idx, 1)
			if ($(ctx).hasClass('nav')) {
				viewAgg[selectedView]['options'] = arr
				elementsForNavigation()
			} else {
				viewAgg[selectedView]['elements'] = arr
				elementsForView()
			}
		}

		function back5() {
			$('#amend').hide()
			$('#create').show()
		}

		$('#5').off().on('click', function() {
			let cancel = false
			for (var key in viewAgg) {
				var dict = viewAgg[key]
				if (!dict['elements'].length) {
					let t = confirm('You have a view that is empty. Are you sure you want to continue?')
					if (t) {
						break
					} else {
						cancel = true
						return
					}
				}
			}

			if (cancel) return

			for (var key in viewAgg) {
				var dict = viewAgg[key]
				if (!dict['options'].length) {
					let t = confirm('You have a view without destination options, and the user will have not have navigation options. Are you sure you want to continue?')
					if (t) {
						break
					} else {
						cancel = true
						return
					}
				}
			}

			if (cancel) return

			let t = confirm('Confirm if you are finished and want to proceed to build your source code.')

			if (t) {
				$('#amend').hide()
				$('#verify').show()
				initVerify()
				initResults({
					configs: agg[0],
					views: viewAgg
				})
			}
		})
	</script>
</div>